
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  labels:
    "app.kubernetes.io/instance": "quarkuspacfn"
    "app.openshift.io/runtime": "quarkus"
    "boson.dev/function": "true"
    "boson.dev/runtime": "quarkus"
    "function.knative.dev": "true"
    "function.knative.dev/name": "quarkuspacfn"
    "function.knative.dev/runtime": "quarkus"
    
  annotations:
    
  name: quarkuspacfn-s2i-git-pipeline
spec:
  params:
    - default: ''
      description: Git repository that hosts the function project
      name: gitRepository
      type: string
    - description: Git revision to build
      name: gitRevision
      type: string
    - default: ''
      description: Path where the function project is
      name: contextDir
      type: string
    - description: Function image name
      name: imageName
      type: string
    - description: The registry associated with the function image
      name: registry
      type: string
    - description: Builder image to be used
      name: builderImage
      type: string
    - description: Environment variables to set during build time
      name: buildEnvs
      type: array
    - description: URL containing the default assemble and run scripts for the builder image
      name: s2iImageScriptsUrl
      type: string
      default: 'image:///usr/libexec/s2i'
  tasks:
    - name: fetch-sources
      params:
        - name: url
          value: $(params.gitRepository)
        - name: revision
          value: $(params.gitRevision)
      taskRef:
        kind: Task
        name: git-clone
      workspaces:
        - name: output
          workspace: source-workspace
    - name: scaffold
      params:
        - name: path
          value: $(workspaces.source.path)/$(params.contextDir)
      workspaces:
        - name: source
          workspace: source-workspace
      runAfter:
        - fetch-sources
      taskSpec:
        params:
          - default: ""
            description: Path to the function project
            name: path
        steps:
          - image: registry.redhat.io/openshift-serverless-1/func-utils-rhel8@sha256:2f2fc99144339587ac755f49933de54d89df61b0818fa3ef98a2ca22246262bb
            name: func-scaffold
            script: |
              scaffold $(params.path)
      
    - name: build
      params:
        - name: IMAGE
          value: $(params.imageName)
        - name: REGISTRY
          value: $(params.registry)
        - name: PATH_CONTEXT
          value: $(params.contextDir)
        - name: BUILDER_IMAGE
          value: $(params.builderImage)
        - name: ENV_VARS
          value:
            - '$(params.buildEnvs[*])'
        - name: S2I_IMAGE_SCRIPTS_URL
          value: $(params.s2iImageScriptsUrl)
      runAfter:
        - scaffold
      taskSpec:
        description: |-
          Knative Functions Source-to-Image (S2I) is a toolkit and workflow for building reproducible container images from source code
          S2I produces images by injecting source code into a base S2I container image and letting the container prepare that source code for execution. The base S2I container images contains the language runtime and build tools needed for building and running the source code.
        params:
          - description: The location of the s2i builder image.
            name: BUILDER_IMAGE
          - description: Reference of the image S2I will produce.
            name: IMAGE
          - description: The registry associated with the function image.
            name: REGISTRY
          - default: .
            description: The location of the path to run s2i from.
            name: PATH_CONTEXT
          - default: "true"
            description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
            name: TLSVERIFY
          - default: "0"
            description: Log level when running the S2I binary
            name: LOGLEVEL
          - default: []
            description: Environment variables to set during _build-time_.
            name: ENV_VARS
            type: array
          - default: image:///usr/libexec/s2i
            description: The URL containing the default assemble and run scripts for the builder image.
            name: S2I_IMAGE_SCRIPTS_URL
        results:
          - description: Digest of the image just built.
            name: IMAGE_DIGEST
        steps:
          - args:
              - $(params.ENV_VARS[*])
            image: registry.redhat.io/openshift-serverless-1/func-utils-rhel8@sha256:2f2fc99144339587ac755f49933de54d89df61b0818fa3ef98a2ca22246262bb
            name: generate
            script: |
              echo "Processing Build Environment Variables"
              echo "" > /env-vars/env-file
              for var in "$@"
              do
                  if [[ "$var" != "=" ]]; then
                      echo "$var" >> /env-vars/env-file
                  fi
              done
      
              echo "Generated Build Env Var file"
              echo "------------------------------"
              cat /env-vars/env-file
              echo "------------------------------"
      
              /usr/local/bin/s2i --loglevel=$(params.LOGLEVEL) build --keep-symlinks $(params.PATH_CONTEXT) $(params.BUILDER_IMAGE) \
              --image-scripts-url $(params.S2I_IMAGE_SCRIPTS_URL) \
              --as-dockerfile /gen-source/Dockerfile.gen --environment-file /env-vars/env-file
      
              echo "Preparing func.yaml for later deployment"
              func_file="$(workspaces.source.path)/func.yaml"
              if [ "$(params.PATH_CONTEXT)" != "" ]; then
                func_file="$(workspaces.source.path)/$(params.PATH_CONTEXT)/func.yaml"
              fi
              sed -i "s|^registry:.*$|registry: $(params.REGISTRY)|" "$func_file"
              echo "Function image registry: $(params.REGISTRY)"
      
              s2iignore_file="$(dirname "$func_file")/.s2iignore"
              [ -f "$s2iignore_file" ] || echo "node_modules" >> "$s2iignore_file"
            volumeMounts:
              - mountPath: /gen-source
                name: gen-source
              - mountPath: /env-vars
                name: env-vars
            workingDir: $(workspaces.source.path)
          - image: registry.redhat.io/rhel8/buildah@sha256:a1e5cc0fb334e333e5eab69689223e8bd1f0c060810d260603b26cf8c0da2023
            name: build
            script: |
              TLS_VERIFY_FLAG=""
              if [ "$(params.TLSVERIFY)" = "false" ] || [ "$(params.TLSVERIFY)" = "0" ]; then
                TLS_VERIFY_FLAG="--tls-verify=false"
              fi
      
              [[ "$(workspaces.sslcertdir.bound)" == "true" ]] && CERT_DIR_FLAG="--cert-dir $(workspaces.sslcertdir.path)"
              ARTIFACTS_CACHE_PATH="$(workspaces.cache.path)/mvn-artifacts"
              [ -d "${ARTIFACTS_CACHE_PATH}" ] || mkdir "${ARTIFACTS_CACHE_PATH}"
              buildah ${CERT_DIR_FLAG} bud --storage-driver=vfs ${TLS_VERIFY_FLAG} --layers \
                -v "${ARTIFACTS_CACHE_PATH}:/tmp/artifacts/:rw,z,U" \
                -f /gen-source/Dockerfile.gen -t $(params.IMAGE) .
      
              [[ "$(workspaces.dockerconfig.bound)" == "true" ]] && export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"
              buildah ${CERT_DIR_FLAG} push --storage-driver=vfs ${TLS_VERIFY_FLAG} --digestfile $(workspaces.source.path)/image-digest \
                $(params.IMAGE) docker://$(params.IMAGE)
      
              cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
            securityContext:
              capabilities:
                add:
                  - SETFCAP
            volumeMounts:
              - mountPath: /var/lib/containers
                name: varlibcontainers
              - mountPath: /gen-source
                name: gen-source
            workingDir: /gen-source
        volumes:
          - emptyDir: {}
            name: varlibcontainers
          - emptyDir: {}
            name: gen-source
          - emptyDir: {}
            name: env-vars
        workspaces:
          - name: source
          - description: Directory where cache is stored (e.g. local mvn repo).
            name: cache
            optional: true
          - name: sslcertdir
            optional: true
          - description: An optional workspace that allows providing a .docker/config.json file for Buildah to access the container registry. The file should be placed at the root of the Workspace with name config.json.
            name: dockerconfig
            optional: true
      
      workspaces:
        - name: source
          workspace: source-workspace
        - name: cache
          workspace: cache-workspace
        - name: dockerconfig
          workspace: dockerconfig-workspace
    - name: deploy
      params:
        - name: path
          value: $(workspaces.source.path)/$(params.contextDir)
        - name: image
          value: $(params.imageName)@$(tasks.build.results.IMAGE_DIGEST)
      runAfter:
        - build
      taskSpec:
        description: This Task performs a deploy operation using the Knative "func"" CLI
        params:
          - default: ""
            description: Path to the function project
            name: path
          - default: ""
            description: Container image to be deployed
            name: image
        steps:
          - image: registry.redhat.io/openshift-serverless-1/func-utils-rhel8@sha256:2f2fc99144339587ac755f49933de54d89df61b0818fa3ef98a2ca22246262bb
            name: func-deploy
            script: |
              deploy $(params.path) "$(params.image)"
        workspaces:
          - description: The workspace containing the function project
            name: source
      
      workspaces:
        - name: source
          workspace: source-workspace
  workspaces:
    - description: Directory where function source is located.
      name: source-workspace
    - description: Directory where build cache is stored.
      name: cache-workspace
    - description: Directory containing image registry credentials stored in config.json file.
      name: dockerconfig-workspace
      optional: true
